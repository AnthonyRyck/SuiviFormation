@page "/competence/{IdCompetence:int}"
@using FormationApp.Composants

@inject ICompetence CompetenceViewModel 

@if (CompetenceViewModel.CompetenceView == null)
{
	<div class="spinner"></div>
}
else
{

	@if (CompetenceViewModel.DisplayDetail)
	{
		<DetailFormation Formation="@CompetenceViewModel.SelectedFormation"
						 OnClickToDownload="@(e => CompetenceViewModel.DownloadOnClick(e, CompetenceViewModel.SelectedFormation.IdFormation, CompetenceViewModel.SelectedFormation.NomDuFichier))"
						 OnClickToClose="@(e => CompetenceViewModel.CloseDetail(e))" />
	}

	<div class="title-detail cadre">
		<h2><b>@CompetenceViewModel.CompetenceView.Competence.Titre</b></h2>

		@*information sur la compétence*@
		<div class="padding-5">
			<div>
				<u>Description</u> :
			</div>
			<div>
				@CompetenceViewModel.CompetenceView.Competence.Description
			</div>
		</div>
	</div>

	@*Liste des formations*@
	<div class="title-detail cadre margin10px">
		<h2>Liste des formations</h2>

		<div class="formation-flex">
			@foreach (var formation in CompetenceViewModel.CompetenceView.Formations)
			{
				<div class="card-formation grow" @onclick="@(e =>  CompetenceViewModel.ClickOnFormation(formation))">
					<h2 class="card-header-formation">@formation.Titre</h2>
					<div class="card-formation-description">@formation.Description</div>
				</div>
			}
		</div>
	</div>
}


@code {

	[Parameter]
	public int IdCompetence { get; set; }

	protected async override Task OnInitializedAsync()
	{
		await CompetenceViewModel.LoadCompetence(IdCompetence);
	}
}
